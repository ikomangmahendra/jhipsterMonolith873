package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProgramAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramAllPropertiesEquals(Program expected, Program actual) {
        assertProgramAutoGeneratedPropertiesEquals(expected, actual);
        assertProgramAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramAllUpdatablePropertiesEquals(Program expected, Program actual) {
        assertProgramUpdatableFieldsEquals(expected, actual);
        assertProgramUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramAutoGeneratedPropertiesEquals(Program expected, Program actual) {
        assertThat(expected)
            .as("Verify Program auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramUpdatableFieldsEquals(Program expected, Program actual) {
        assertThat(expected)
            .as("Verify Program relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getExternalSystemLkp()).as("check externalSystemLkp").isEqualTo(actual.getExternalSystemLkp()))
            .satisfies(e -> assertThat(e.getIsEnableFollowUp()).as("check isEnableFollowUp").isEqualTo(actual.getIsEnableFollowUp()))
            .satisfies(e -> assertThat(e.getIsNsfSurveyAccess()).as("check isNsfSurveyAccess").isEqualTo(actual.getIsNsfSurveyAccess()))
            .satisfies(e -> assertThat(e.getIsOptOutAllowed()).as("check isOptOutAllowed").isEqualTo(actual.getIsOptOutAllowed()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramUpdatableRelationshipsEquals(Program expected, Program actual) {
        assertThat(expected)
            .as("Verify Program relationships")
            .satisfies(e -> assertThat(e.getCoordinators()).as("check coordinators").isEqualTo(actual.getCoordinators()));
    }
}
